-- since this is just an example spec, don't actually load anything here and return an empty spec
-- stylua: ignore
if true then return {} end

vim.api.nvim_create_user_command("MySelect", function()
  vim.ui.select({
    { "name1" },
    { "name2" },
    { "name3" },
  }, {
    prompt = "Authenticate Type",
    format_item = function(item)
      -- print(item[1])
      return item[1]
    end,
  }, function(item)
    if item then
      print(item[1])
      -- item.callback()
    end
  end)
end, { nargs = "?", complete = "dir" })

vim.api.nvim_create_user_command("MyPaste", function()
  local data = {
    "a",
    "b",
    "c",
  }
  for _, value in ipairs(data) do
    vim.api.nvim_paste(value .. "\n", true, -1)
  end
end, { nargs = "?", complete = "dir" })

vim.api.nvim_create_user_command("MyTest", function()
  local function get_activate_conda_env()
    local output = vim.fn.systemlist("conda info")
    for _, line in ipairs(output) do
      if string.find(line, "active environment", 1, true) then
        line = line:gsub("%s", "")
        local environment = line:gsub("%s", ""):match("activeenvironment:(%S+)")
        return environment
      end
    end
  end
  get_activate_conda_env()
end, { nargs = "?", complete = "dir" })

local function read_file_range(uri, start_line, end_line, start_char, end_char)
  local path = vim.uri_to_fname(uri)
  local lines = vim.fn.readfile(path)

  -- 转换为以1为基础的索引
  start_line = start_line + 1
  end_line = end_line + 1

  -- 截取指定行范围的内容
  local content = {}
  for i = start_line, end_line do
    local line = lines[i]
    local start_pos = start_line == i and start_char + 1 or 1
    local end_pos = end_line == i and end_char or #line
    table.insert(content, string.sub(line, start_pos, end_pos))
  end

  return content
end

local function get_variable_type()
  local position = vim.fn.getpos(".")
  local params = {
    textDocument = vim.lsp.util.make_text_document_params(),
    position = { line = position[2] - 1, character = position[3] - 1 },
  }

  vim.lsp.buf_request(0, "textDocument/typeDefinition", params, function(a, target, result)
    if a and a ~= vim.NIL then
      print("a:", vim.inspect(a))
    end
    if target and target ~= vim.NIL then
      print("target:", vim.inspect(target))
      -- local _end = target[1]["range"]["end"]
      -- local _start = target[1]["range"]["start"]
      -- local content = read_file_range(target[1]["uri"], _start.line, _end.line, _start.character, _end.character)
      -- print(vim.inspect(content))
    end
    if result and result ~= vim.NIL then
      print("Variable type:", vim.inspect(result))
    end
  end)
end

vim.api.nvim_create_user_command("GetVarType", function()
  get_variable_type()
end, { nargs = "?", complete = "dir" })

-- vim.api.nvim_create_user_command("MyDialogShow", function()
--   local diag = vim.lsp.diagnostic.get_line_diagnostics()
--   vim.cmd("new diagnostic")
--   vim.api.nvim_paste(vim.inspect(diag), true, -1)
-- end, { nargs = "?", complete = "dir" })

-- function get_gitsigns_actions()
--   local ok, gitsigns = pcall(require, "gitsigns")
--   if not ok then
--     return
--   end

--   local gitsigns_actions = gitsigns.get_actions()
--   if not gitsigns_actions or vim.tbl_isempty(gitsigns_actions) then
--     return
--   end

--   local name_to_title = function(name)
--     return name:sub(1, 1):upper() .. name:gsub("_", " "):sub(2)
--   end

--   local actions = {}
--   local range_actions = { ["reset_hunk"] = true, ["stage_hunk"] = true }
--   local mode = vim.api.nvim_get_mode().mode
--   for name, action in pairs(gitsigns_actions) do
--     local title = name_to_title(name)
--     local cb = action
--     if (mode == "v" or mode == "V") and range_actions[name] then
--       title = title:gsub("hunk", "selection")
--       cb = function()
--         -- action({ params.range.start.line, params.range["end"].line })
--       end
--     end
--     actions[#actions + 1] = {
--       title = title,
--       action = function()
--         -- local bufnr = vim.uri_to_bufnr(params.textDocument.uri)
--         vim.api.nvim_buf_call(vim.fn.line("."), cb)
--       end,
--     }
--   end
--   return actions
-- end

-- vim.api.nvim_create_user_command("ViewGitsignsCodeAction", function()
--   local actions = get_gitsigns_actions()
--   vim.cmd("new gitsigns_codeactions")
--   vim.api.nvim_paste(vim.inspect(actions), true, -1)
-- end, { nargs = "?", complete = "dir" })

-- function custom_code_action()
--   local params = vim.lsp.util.make_range_params()
--   params.context = { diagnostics = vim.lsp.diagnostic.get_line_diagnostics() }

--   vim.lsp.buf_request_all(0, "textDocument/codeAction", params, function(result)
--     -- vim.cmd("new result")
--     -- vim.api.nvim_paste(vim.inspect(result), true, -1)
--     result["test_action"] = function()
--       vim.notify("this is test action")
--     end
--     vim.lsp.util.apply_workspace_edit(result, "utf-8")
--     -- if result and result[1] then
--     --   -- 添加自定义项目
--     --   table.insert(result[1].edit.changes, {
--     --     ["your_file_path"] = {
--     --       {
--     --         range = result[1].edit.range,
--     --         newText = "Your custom text",
--     --       },
--     --     },
--     --   })
--     --   vim.lsp.util.apply_workspace_edit(result[1].edit)
--     -- end
--   end)
-- end

-- vim.api.nvim_create_user_command("MyCodeAction", custom_code_action, { nargs = "?", complete = "dir" })
-- every spec file under config.plugins will be loaded automatically by lazy.nvim
--
-- In your plugin files, you can:
-- * add extra plugins
-- * disable/enabled LazyVim plugins
-- * override the configuration of LazyVim plugins
return {
  -- add gruvbox
  { "ellisonleao/gruvbox.nvim" },

  -- Configure LazyVim to load gruvbox
  {
    "LazyVim/LazyVim",
    opts = {
      -- colorscheme = "gruvbox",
    },
  },

  -- change trouble config
  {
    "folke/trouble.nvim",
    -- opts will be merged with the parent spec
    opts = { use_diagnostic_signs = true },
  },

  -- disable trouble
  { "folke/trouble.nvim", enabled = false },

  -- add symbols-outline
  {
    "simrat39/symbols-outline.nvim",
    cmd = "SymbolsOutline",
    keys = { { "<leader>cs", "<cmd>SymbolsOutline<cr>", desc = "Symbols Outline" } },
    config = true,
  },

  -- override nvim-cmp and add cmp-emoji
  {
    "hrsh7th/nvim-cmp",
    dependencies = { "hrsh7th/cmp-emoji" },
    ---@param opts cmp.ConfigSchema
    opts = function(_, opts)
      local cmp = require("cmp")
      opts.sources = cmp.config.sources(vim.list_extend(opts.sources, { { name = "emoji" } }))
    end,
  },

  -- change some telescope options and a keymap to browse plugin files
  {
    "nvim-telescope/telescope.nvim",
    keys = {
      -- add a keymap to browse plugin files
      -- stylua: ignore
      {
        "<leader>fp",
        function() require("telescope.builtin").find_files({ cwd = require("lazy.core.config").options.root }) end,
        desc = "Find Plugin File",
      },
    },
    -- change some options
    opts = {
      defaults = {
        layout_strategy = "horizontal",
        layout_config = { prompt_position = "top" },
        sorting_strategy = "ascending",
        winblend = 0,
      },
    },
  },

  -- add telescope-fzf-native
  {
    "telescope.nvim",
    dependencies = {
      "nvim-telescope/telescope-fzf-native.nvim",
      build = "make",
      config = function()
        require("telescope").load_extension("fzf")
      end,
    },
  },

  -- add pyright to lspconfig
  {
    "neovim/nvim-lspconfig",
    ---@class PluginLspOpts
    opts = {
      ---@type lspconfig.options
      servers = {
        -- pyright will be automatically installed with mason and loaded with lspconfig
        pyright = {},
      },
    },
  },

  -- add tsserver and setup with typescript.nvim instead of lspconfig
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      "jose-elias-alvarez/typescript.nvim",
      init = function()
        require("lazyvim.util").on_attach(function(_, buffer)
          -- stylua: ignore
          vim.keymap.set( "n", "<leader>co", "TypescriptOrganizeImports", { buffer = buffer, desc = "Organize Imports" })
          vim.keymap.set("n", "<leader>cR", "TypescriptRenameFile", { desc = "Rename File", buffer = buffer })
        end)
      end,
    },
    ---@class PluginLspOpts
    opts = {
      ---@type lspconfig.options
      servers = {
        -- tsserver will be automatically installed with mason and loaded with lspconfig
        tsserver = {},
      },
      -- you can do any additional lsp server setup here
      -- return true if you don't want this server to be setup with lspconfig
      ---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>
      setup = {
        -- example to setup with typescript.nvim
        tsserver = function(_, opts)
          require("typescript").setup({ server = opts })
          return true
        end,
        -- Specify * to use this function as a fallback for any server
        -- ["*"] = function(server, opts) end,
      },
    },
  },

  -- for typescript, LazyVim also includes extra specs to properly setup lspconfig,
  -- treesitter, mason and typescript.nvim. So instead of the above, you can use:
  { import = "lazyvim.plugins.extras.lang.typescript" },

  -- add more treesitter parsers
  {
    "nvim-treesitter/nvim-treesitter",
    opts = {
      ensure_installed = {
        "bash",
        "help",
        "html",
        "javascript",
        "json",
        "lua",
        "markdown",
        "markdown_inline",
        "python",
        "query",
        "regex",
        "tsx",
        "typescript",
        "vim",
        "yaml",
      },
    },
  },

  -- since `vim.tbl_deep_extend`, can only merge tables and not lists, the code above
  -- would overwrite `ensure_installed` with the new value.
  -- If you'd rather extend the default config, use the code below instead:
  {
    "nvim-treesitter/nvim-treesitter",
    opts = function(_, opts)
      -- add tsx and treesitter
      vim.list_extend(opts.ensure_installed, {
        "tsx",
        "typescript",
      })
    end,
  },

  -- the opts function can also be used to change the default opts:
  {
    "nvim-lualine/lualine.nvim",
    event = "VeryLazy",
    opts = function(_, opts)
      table.insert(opts.sections.lualine_x, "😄")
    end,
  },

  -- or you can return new options to override all the defaults
  {
    "nvim-lualine/lualine.nvim",
    event = "VeryLazy",
    opts = function()
      return {
        --[[add your custom lualine config here]]
      }
    end,
  },

  -- use mini.starter instead of alpha
  { import = "lazyvim.plugins.extras.ui.mini-starter" },

  -- add jsonls and schemastore ans setup treesitter for json, json5 and jsonc
  { import = "lazyvim.plugins.extras.lang.json" },

  -- add any tools you want to have installed below
  {
    "williamboman/mason.nvim",
    opts = {
      ensure_installed = {
        "stylua",
        "shellcheck",
        "shfmt",
        "flake8",
      },
    },
  },

  -- Use <tab> for completion and snippets (supertab)
  -- first: disable default <tab> and <s-tab> behavior in LuaSnip
  {
    "L3MON4D3/LuaSnip",
    keys = function()
      return {}
    end,
  },
  -- then: setup supertab in cmp
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-emoji",
    },
    ---@param opts cmp.ConfigSchema
    opts = function(_, opts)
      local has_words_before = function()
        unpack = unpack or table.unpack
        local line, col = unpack(vim.api.nvim_win_get_cursor(0))
        return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
      end

      local luasnip = require("luasnip")
      local cmp = require("cmp")

      opts.mapping = vim.tbl_extend("force", opts.mapping, {
        ["<Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item()
            -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
            -- they way you will only jump inside the snippet region
          elseif luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
          elseif has_words_before() then
            cmp.complete()
          else
            fallback()
          end
        end, { "i", "s" }),
        ["<S-Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
        end, { "i", "s" }),
      })
    end,
  },
}
